---
description: 
globs: 
alwaysApply: true
---
---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# ToDoリスト運用ルール

## 1. 基本方針

- ToDoリストは`docs/task/todo.md`で管理
- チェックマーク（`[ ]`）を使用してタスクの進捗を管理
- タスクの完了時は`[x]`に変更
- タスクの追加・修正は随時行う
- タスクの優先順位は親タスクの順序で表現

## 2. タスク管理ルール

### 2.1 タスクの追加
- 新しいタスクは適切な親タスクの下に追加
- タスクは具体的なアクションアイテムとして記述
- 必要に応じて子タスクを追加して詳細化
- タスクの追加時は`[ ]`の状態で開始

### 2.2 タスクの完了
- タスク完了時は`[ ]`を`[x]`に変更
- 子タスクが全て完了したら親タスクも完了としてマーク
- 完了したタスクは削除せず、進捗の記録として残す

### 2.3 タスクの修正
- タスクの内容変更が必要な場合は、新しいタスクとして追加
- 古いタスクは完了としてマークし、変更内容を記録
- タスクの優先順位変更は、親タスクの順序を変更して表現

## 3. 進捗管理

### 3.1 進捗の記録
- タスクの完了日を記録（オプション）
- 重要なマイルストーンはコメントとして記録
- ブロッカーの発生時は、ブロッカーの内容を記録

### 3.2 進捗の確認
- 定期的にToDoリストを確認
- 完了したタスクをチェック
- 新規タスクの追加を検討
- 優先順位の見直しを実施

## 4. コミュニケーション

### 4.1 タスクの共有
- ToDoリストの変更はGitで管理
- コミットメッセージで変更内容を明確に記述
- 重要な変更はプルリクエストでレビュー

### 4.2 ブロッカー対応
- ブロッカーが発生した場合は、該当タスクにコメントを追加
- ブロッカーの解決方法を検討し、必要に応じてタスクを分割
- ブロッカーの影響を受けるタスクは、優先順位を調整

## 5. メンテナンス

### 5.1 定期的な見直し
- 週次でToDoリストの見直しを実施
- 完了したタスクの確認
- 新規タスクの追加
- 優先順位の調整

### 5.2 アーカイブ
- 完了した大きなマイルストーンは、完了日を記録
- 長期的な参考情報として保持
- 必要に応じて過去の進捗を参照可能に

## 6. バージョン管理

### 6.1 変更履歴
- 重要な変更はGitのコミットメッセージに記録
- コミットメッセージは以下の形式で記述：
  ```
  todo: 変更内容の簡潔な説明

  - 詳細な変更点1
  - 詳細な変更点2
  ```

### 6.2 レビュー
- 大きな変更はプルリクエストでレビュー
- レビューコメントはToDoリストに反映
- レビュー後の修正は新しいコミットとして記録